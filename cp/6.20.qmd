---
title: "Vector, Set, Map (6/20)"
author: "Batsambuu Batbold"
format: html
lang: mn
number-sections: true
toc: true
---

# Удиртгал

Энэ хичээлээр C++ хэл дээрх гурван чухал **өгөгдлийн бүтэц (data structure)** болох `vector`, `set`, `map`-ийг судална.

Эдгээр нь C++-ийн **Standard Template Library (STL)**-ийн үндсэн хэсэг бөгөөд олимпиад, competitive programming-д заавал сурах хэрэгтэй бүтэц юм.

---

# `vector` — Динамик массив

## Vector гэж юу вэ?

`vector` бол C++-ийн **динамик массив** юм. Хэмжээ нь программ ажиллах явцад өөрчлөгдөж болдог.

```cpp
#include <vector>
using namespace std;

vector<int> v;
```

## Үндсэн үйлдлүүд

```cpp
v.push_back(10);    // Сүүлд 10 нэмэх
v.pop_back();       // Сүүлийн элементийг устгах
v.size();           // Хэмжээ авах
v.empty();          // Хоосон эсэхийг шалгах (true/false)
v.clear();          // Бүх элементийг арилгах
v[i];               // i-р элементийг авах (0-based)
```

## Зарлах аргууд

```cpp
vector<int> v = {1, 2, 3};         // Шууд утгаар
vector<int> a(5);                  // 5 ширхэг 0
vector<int> b(4, 7);               // 4 ширхэг 7
```

## Давталт ашиглах

```cpp
for (int i = 0; i < v.size(); i++)
    cout << v[i] << " ";

for (int x : v) // range-based for
    cout << x << " ";
```

## Векторын сорт хийх

```cpp
sort(v.begin(), v.end());           // өсөхөөр
sort(v.rbegin(), v.rend());         // буурахаар
```

## 2D vector (матриц)

```cpp
vector<vector<int>> grid(3, vector<int>(4, 0)); // 3x4 matrix
```

---

# `set` — Давтагдахгүй элемент хадгалах

## Set гэж юу вэ?

`set` бол **unique (давтагдахгүй)** утгуудыг хадгалах бүтэц. Мөн **автоматаар эрэмбэлэгддэг**.

```cpp
#include <set>
using namespace std;

set<int> s;
```

## Үндсэн үйлдлүүд

```cpp
s.insert(5);       // 5-г нэмэх
s.insert(2);
s.erase(2);        // 2-г устгах
s.count(5);        // 5 байвал 1, байхгүй бол 0
s.size();          // хэмжээг авах
s.empty();         // хоосон эсэх

s.clear();         // бүгдийг устгах
```

## Давталт ашиглах

```cpp
for (int x : s)
    cout << x << " ";
```

## Set-ийн шинж чанарууд

- Давхардсан утга **хадгалахгүй**
- **Автоматаар эрэмбэлнэ**
- Оролт, гаралт **O(log n)** хугацаанд ажиллана

## `multiset`

Хэрэв та **давхардсан утгууд** хадгалахыг хүсвэл `multiset` ашиглана.

```cpp
multiset<int> ms;
ms.insert(5);
ms.insert(5); // OK
```

---

# `map` — Түлхүүр ба утга (key-value pair)

## Map гэж юу вэ?

`map` бол **түлхүүр-утга хос** хадгалах бүтэц. Жишээлбэл, нэр болон оноо.

```cpp
#include <map>
using namespace std;

map<string, int> scores;
```

## Үндсэн үйлдлүүд

```cpp
scores["Bold"] = 90;
scores["Amar"] = 85;

cout << scores["Bold"];  // 90
scores.erase("Amar");    // "Amar" устгах
scores.count("Tuya");    // байгаа эсэх (0 эсвэл 1)
```

## Давталт ашиглах

```cpp
for (auto it : scores) {
    cout << it.first << ": " << it.second << endl;
}
```

## Автоматаар эрэмбэлэгддэг

Map дахь key-үүд **өсөх дарааллаар** эрэмбэлэгдэнэ.

---

## `unordered_map`

Хэрэв эрэмбэлэх шаардлагагүй бол `unordered_map` ашигласнаар илүү хурдан ажиллана:

```cpp
#include <unordered_map>
unordered_map<string, int> freq;
```

> ⚠️ `unordered_map` нь key-үүдийг **hash** ашиглан хадгалдаг тул **O(1)** дундаж хугацаатай.

---

# Харьцуулсан хүснэгт

| Бүтэц       | Давхар утга | Эрэмбэлэлт | Оруулах хурд | Олох хурд |
|-------------|-------------|------------|---------------|------------|
| vector      | ✅           | ❌         | O(1)            | O(n)       |
| set         | ❌           | ✅         | O(log n)        | O(log n)   |
| multiset    | ✅           | ✅         | O(log n)        | O(log n)   |
| map         | key-үүд давхардахгүй | ✅ | O(log n)        | O(log n)   |
| unordered_map | key-үүд давхардахгүй | ❌ | O(1) (avg)      | O(1) (avg) |

---

# Жишээ код

## Давтагдсан тоог арилгах

```cpp
vector<int> a = {1, 2, 2, 3, 4, 1};
set<int> s(a.begin(), a.end());
for (int x : s) cout << x << " ";
```

## Хэдэн удаа орсныг тоолох

```cpp
vector<int> a = {1, 2, 2, 3, 1, 1};
map<int, int> freq;
for (int x : a) freq[x]++;
for (auto p : freq)
    cout << p.first << ": " << p.second << endl;
```

## Vector сорт ба давталт

```cpp
vector<int> a = {5, 3, 8, 2};
sort(a.begin(), a.end());
for (int i = 0; i < a.size(); i++)
    cout << a[i] << " ";
```

---

# Дүгнэлт

- `vector` бол динамик, уян хатан массив бөгөөд сорт хийх, push хийх зэрэг үйлдэлд тохиромжтой.
- `set` нь **давхардсан утгагүй**, автоматаар эрэмбэлдэг бүтэц.
- `map` бол **түлхүүр-утга хос** хадгалах, нэрс ба оноо гэх мэт өгөгдлийг хадгалахад маш тохиромжтой.
- Эдгээр STL бүтцүүд нь C++ программчлалын чухал суурь тул заавал сайн эзэмшээрэй.

---

# Practice Problems

## Vector – Динамик массив

### Тоонуудыг буурахаар эрэмбэлэх

Хэрэглэгчээс $n$ ширхэг бүхэл тоо авч, `vector<int>`-т хадгал. Дараа нь эдгээр тоог **буурах дарааллаар** эрэмбэлээд хэвлэ.

### Дундаж тооцох

Хэрэглэгчээс `vector` доторх бүх тоог авч хадгал. Бүх тооны **дундажийг** бодож, нэг орны нарийвчлалтайгаар хэвлэ.

### Сүүлээс нь хэвлэх

Хэрэглэгчээс авсан `vector`-ийг **урвуугаар** (сүүлээс эхлэн) хэвлэ. `reverse()` функц ашиглаж болохгүй.

---

## Set - Давтагдахгүй, эрэмбэлэгдсэн өгөгдөл

### Давхардсан үгсийг арилгах

$N$ ширхэг string (үг) авч `set<string>`-д хадгал. Давхардлыг арилгаж, **үсгийн дарааллаар** хэвлэ.

### Тоо агуулагдаж байгаа эсэхийг шалгах

`set<int>`-д тоонууд нэмээд, хэрэглэгчийн оруулсан $x$ тоо **байгаа эсэхийг** шалгаж “YES” эсвэл “NO” гэж хэвлэ.

### Огтлол олох

Хоёр `set<int>` өгөгдсөн бол, хоёуланд нь байдаг тоонуудыг **олонлогийн огтлол** хэлбэрээр хэвлэ.

---

##  Map – Түлхүүр-утга хос

### Давтамж тоолох

Хэрэглэгчээс $n$ ширхэг бүхэл тоо авч `map<int, int>`-д хадгал. **Тоо бүр хэдэн удаа гарсан** болохыг дарааллаар хэвлэ.

### Нэрээр оноо хадгалах ба хэвлэх

`map<string, int>` ашиглан $n$ ширхэг оюутны нэр болон оноог хадгал. Нэрийн **үсгийн дарааллаар** нэр болон оноог хэвлэ.

### Хамгийн өндөр оноотой хүнийг олох

`map<string, int>`-д хадгалагдсан мэдээллээс **хамгийн өндөр оноо** авсан хүний нэр болон оноог хэвлэ.

---
